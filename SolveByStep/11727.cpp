//#11727
//
//제목
//2×n 타일링 2
//
//문제
//
//2×n 직사각형을 2×1과 2×2 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.
//
//아래 그림은 2×17 직사각형을 채운 한가지 예이다.
//
//입력
//
//첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1, 000)
//출력
//
//첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10, 007로 나눈 나머지를 출력한다.

#include <iostream>

using namespace std;

//앞에서 푼 11726번 문제, 2xn 타일링 2와 같은 방식으로 접근했다.
//이번 문제에서는 2*2 타일이 추가됬다.
//엑셀에 그림을 그려가면서 점화식을 세웠다.
//n=1일 때는 1*2타일 하나 => 1
//n=2일 때는 1*2타일 두개 or 2*1타일 두개 or 2*2 타일 하나 => 3
//n=3일 때는 n=2의 방식 각각에서 1*2타일 하나씩 추가 or n=1의 방식에서 2*2타일을 채워야 한다.
//이 때 n=1의 방식에서 남은 2*2를 채울 때 1*2를 2개 넣기 or 2*1를 두개 넣기 or 2*2 하나 넣기인데, 1*2를 2개 넣는 방법은 n=2일 때의 방식과 겹친다.
//따라서, n=1의 방식에서 남은 2*2를 채우는 방법 중 유효한 방법은, 2*1을 2개 넣는 방식와, 2*2를 하나 넣는 방식, 2개다. 
//최종적으로, n=3일때는 n-1인 n=2의 방식에서 끝자락에 1*2타일 하나씩 추가하는 방법 => 3
//그리고 n-2인 n=1의 방식에서 빈 2*2공간을 유효하게 채우는 방법 => 2이므로
//두 방법의 경우의 수를 더하면 5이다.
//이렇게 세운 점화식은 f(n) = f(n-1) + (f-2) * 2가 된다.
//(실제로는 n=5일때까지 해보면서 점화식을 찾았다.)

int arr[1001];

int solution(int n)
{
	if (n == 1)
		return 1;

	if (n == 2)
		return 3;

	if (arr[n - 1] == 0)
		arr[n - 1] = solution(n - 1);

	if (arr[n - 2] == 0)
		arr[n - 2] = solution(n - 2);

	return (arr[n - 1] + (arr[n - 2]) * 2) % 10007;
}

int main()
{
	int input;
	cin >> input;

	cout << solution(input) << "\n";
	return 0;
}